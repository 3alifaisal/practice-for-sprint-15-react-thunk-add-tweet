{"ast":null,"code":"// constant to avoid debugging typos\nconst GET_ALL_TWEETS = \"tweet/getAllTweets\";\nconst ADD_TWEET = \"tweet/addTweet\"; //regular action creator\n\nconst loadTweets = tweets => {\n  return {\n    type: GET_ALL_TWEETS,\n    tweets\n  };\n};\n\nconst addTweet = tweet => {\n  return {\n    type: ADD_TWEET,\n    tweet\n  };\n}; // thunk action creator\n\n\nexport const getAllTweets = () => async dispatch => {\n  const response = await fetch(\"/api/tweets\");\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(loadTweets(data));\n    return data;\n  }\n};\nexport const postATweet = body => async dispatch => {\n  await fetch(\"/api/tweets\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(body)\n  });\n  dispatch(addTweet(body));\n}; // state object\n\nconst initialState = {}; // reducer\n\nconst tweetsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_ALL_TWEETS:\n      {\n        const newState = {};\n        action.tweets.forEach(tweet => newState[tweet.id] = tweet);\n        return newState;\n      }\n\n    case ADD_TWEET:\n      {\n        const newState = { ...state\n        };\n        newState[action.tweet.id];\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default tweetsReducer;","map":{"version":3,"sources":["/Users/aliawada/openAcademy/practice-for-sprint-15-react-thunk-add-tweet/frontend/src/store/tweet.js"],"names":["GET_ALL_TWEETS","ADD_TWEET","loadTweets","tweets","type","addTweet","tweet","getAllTweets","dispatch","response","fetch","ok","data","json","postATweet","body","method","headers","JSON","stringify","initialState","tweetsReducer","state","action","newState","forEach","id"],"mappings":"AAAA;AACA,MAAMA,cAAc,GAAG,oBAAvB;AACA,MAAMC,SAAS,GAAG,gBAAlB,C,CACA;;AACA,MAAMC,UAAU,GAAIC,MAAD,IAAY;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAEJ,cADD;AAELG,IAAAA;AAFK,GAAP;AAID,CALD;;AAMA,MAAME,QAAQ,GAAIC,KAAD,IAAW;AAC1B,SAAO;AACLF,IAAAA,IAAI,EAAEH,SADD;AAELK,IAAAA;AAFK,GAAP;AAID,CALD,C,CAMA;;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACpD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAD,CAA5B;;AAEA,MAAID,QAAQ,CAACE,EAAb,EAAiB;AACf,UAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AAEAL,IAAAA,QAAQ,CAACN,UAAU,CAACU,IAAD,CAAX,CAAR;AACA,WAAOA,IAAP;AACD;AACF,CATM;AAUP,OAAO,MAAME,UAAU,GAAIC,IAAD,IAAU,MAAOP,QAAP,IAAoB;AACtD,QAAME,KAAK,CAAC,aAAD,EAAgB;AACzBM,IAAAA,MAAM,EAAE,MADiB;AAEzBC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFgB;AAKzBF,IAAAA,IAAI,EAAEG,IAAI,CAACC,SAAL,CAAeJ,IAAf;AALmB,GAAhB,CAAX;AAOAP,EAAAA,QAAQ,CAACH,QAAQ,CAACU,IAAD,CAAT,CAAR;AACD,CATM,C,CAUP;;AACA,MAAMK,YAAY,GAAG,EAArB,C,CAEA;;AACA,MAAMC,aAAa,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AACtD,UAAQA,MAAM,CAACnB,IAAf;AACE,SAAKJ,cAAL;AAAqB;AACnB,cAAMwB,QAAQ,GAAG,EAAjB;AACAD,QAAAA,MAAM,CAACpB,MAAP,CAAcsB,OAAd,CAAuBnB,KAAD,IAAYkB,QAAQ,CAAClB,KAAK,CAACoB,EAAP,CAAR,GAAqBpB,KAAvD;AACA,eAAOkB,QAAP;AACD;;AACD,SAAKvB,SAAL;AAAgB;AACd,cAAMuB,QAAQ,GAAG,EAAE,GAAGF;AAAL,SAAjB;AACAE,QAAAA,QAAQ,CAACD,MAAM,CAACjB,KAAP,CAAaoB,EAAd,CAAR;AACD;;AACD;AACE,aAAOJ,KAAP;AAXJ;AAaD,CAdD;;AAgBA,eAAeD,aAAf","sourcesContent":["// constant to avoid debugging typos\nconst GET_ALL_TWEETS = \"tweet/getAllTweets\";\nconst ADD_TWEET = \"tweet/addTweet\";\n//regular action creator\nconst loadTweets = (tweets) => {\n  return {\n    type: GET_ALL_TWEETS,\n    tweets,\n  };\n};\nconst addTweet = (tweet) => {\n  return {\n    type: ADD_TWEET,\n    tweet,\n  };\n};\n// thunk action creator\nexport const getAllTweets = () => async (dispatch) => {\n  const response = await fetch(\"/api/tweets\");\n\n  if (response.ok) {\n    const data = await response.json();\n\n    dispatch(loadTweets(data));\n    return data;\n  }\n};\nexport const postATweet = (body) => async (dispatch) => {\n  await fetch(\"/api/tweets\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(body),\n  });\n  dispatch(addTweet(body));\n};\n// state object\nconst initialState = {};\n\n// reducer\nconst tweetsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ALL_TWEETS: {\n      const newState = {};\n      action.tweets.forEach((tweet) => (newState[tweet.id] = tweet));\n      return newState;\n    }\n    case ADD_TWEET: {\n      const newState = { ...state };\n      newState[action.tweet.id];\n    }\n    default:\n      return state;\n  }\n};\n\nexport default tweetsReducer;\n"]},"metadata":{},"sourceType":"module"}