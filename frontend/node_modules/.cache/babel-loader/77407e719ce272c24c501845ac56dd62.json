{"ast":null,"code":"// constant to avoid debugging typos\nconst GET_ALL_TWEETS = \"tweet/getAllTweets\";\nconst ADD_TWEET = \"tweet/addTweet\"; //regular action creator\n\nconst loadTweets = tweets => {\n  return {\n    type: GET_ALL_TWEETS,\n    tweets\n  };\n};\n\nconst addTweet = tweet => {\n  return {\n    type: ADD_TWEET,\n    tweet\n  };\n}; // thunk action creator\n\n\nexport const getAllTweets = () => async dispatch => {\n  const response = await fetch(\"/api/tweets\");\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(loadTweets(data));\n    return data;\n  }\n};\nexport const postATweet = body => async dispatch => {\n  const response = await fetch(\"/api/tweets\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      message: body\n    })\n  });\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(addTweet(data));\n    return data;\n  }\n}; // state object\n\nconst initialState = {}; // reducer\n\nconst tweetsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_ALL_TWEETS:\n      {\n        const newState = {};\n        action.tweets.forEach(tweet => newState[tweet.id] = tweet);\n        return newState;\n      }\n\n    case ADD_TWEET:\n      {\n        const newState = { ...state\n        };\n        newState[action.tweet.id] = action.tweet;\n        return newState;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default tweetsReducer;","map":{"version":3,"sources":["/Users/aliawada/openAcademy/practice-for-sprint-15-react-thunk-add-tweet/frontend/src/store/tweet.js"],"names":["GET_ALL_TWEETS","ADD_TWEET","loadTweets","tweets","type","addTweet","tweet","getAllTweets","dispatch","response","fetch","ok","data","json","postATweet","body","method","headers","JSON","stringify","message","initialState","tweetsReducer","state","action","newState","forEach","id"],"mappings":"AAAA;AACA,MAAMA,cAAc,GAAG,oBAAvB;AACA,MAAMC,SAAS,GAAG,gBAAlB,C,CACA;;AACA,MAAMC,UAAU,GAAIC,MAAD,IAAY;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAEJ,cADD;AAELG,IAAAA;AAFK,GAAP;AAID,CALD;;AAMA,MAAME,QAAQ,GAAIC,KAAD,IAAW;AAC1B,SAAO;AACLF,IAAAA,IAAI,EAAEH,SADD;AAELK,IAAAA;AAFK,GAAP;AAID,CALD,C,CAMA;;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACpD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAD,CAA5B;;AAEA,MAAID,QAAQ,CAACE,EAAb,EAAiB;AACf,UAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AAEAL,IAAAA,QAAQ,CAACN,UAAU,CAACU,IAAD,CAAX,CAAR;AACA,WAAOA,IAAP;AACD;AACF,CATM;AAUP,OAAO,MAAME,UAAU,GAAIC,IAAD,IAAU,MAAOP,QAAP,IAAoB;AACtD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAD,EAAgB;AAC1CM,IAAAA,MAAM,EAAE,MADkC;AAE1CC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFiC;AAK1CF,IAAAA,IAAI,EAAEG,IAAI,CAACC,SAAL,CAAe;AAAEC,MAAAA,OAAO,EAAEL;AAAX,KAAf;AALoC,GAAhB,CAA5B;;AAQA,MAAIN,QAAQ,CAACE,EAAb,EAAiB;AACf,UAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AACAL,IAAAA,QAAQ,CAACH,QAAQ,CAACO,IAAD,CAAT,CAAR;AACA,WAAOA,IAAP;AACD;AACF,CAdM,C,CAeP;;AACA,MAAMS,YAAY,GAAG,EAArB,C,CAEA;;AACA,MAAMC,aAAa,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AACtD,UAAQA,MAAM,CAACpB,IAAf;AACE,SAAKJ,cAAL;AAAqB;AACnB,cAAMyB,QAAQ,GAAG,EAAjB;AACAD,QAAAA,MAAM,CAACrB,MAAP,CAAcuB,OAAd,CAAuBpB,KAAD,IAAYmB,QAAQ,CAACnB,KAAK,CAACqB,EAAP,CAAR,GAAqBrB,KAAvD;AACA,eAAOmB,QAAP;AACD;;AACD,SAAKxB,SAAL;AAAgB;AACd,cAAMwB,QAAQ,GAAG,EAAE,GAAGF;AAAL,SAAjB;AACAE,QAAAA,QAAQ,CAACD,MAAM,CAAClB,KAAP,CAAaqB,EAAd,CAAR,GAA4BH,MAAM,CAAClB,KAAnC;AACA,eAAOmB,QAAP;AACD;;AACD;AACE,aAAOF,KAAP;AAZJ;AAcD,CAfD;;AAiBA,eAAeD,aAAf","sourcesContent":["// constant to avoid debugging typos\nconst GET_ALL_TWEETS = \"tweet/getAllTweets\";\nconst ADD_TWEET = \"tweet/addTweet\";\n//regular action creator\nconst loadTweets = (tweets) => {\n  return {\n    type: GET_ALL_TWEETS,\n    tweets,\n  };\n};\nconst addTweet = (tweet) => {\n  return {\n    type: ADD_TWEET,\n    tweet,\n  };\n};\n// thunk action creator\nexport const getAllTweets = () => async (dispatch) => {\n  const response = await fetch(\"/api/tweets\");\n\n  if (response.ok) {\n    const data = await response.json();\n\n    dispatch(loadTweets(data));\n    return data;\n  }\n};\nexport const postATweet = (body) => async (dispatch) => {\n  const response = await fetch(\"/api/tweets\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ message: body }),\n  });\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(addTweet(data));\n    return data;\n  }\n};\n// state object\nconst initialState = {};\n\n// reducer\nconst tweetsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_ALL_TWEETS: {\n      const newState = {};\n      action.tweets.forEach((tweet) => (newState[tweet.id] = tweet));\n      return newState;\n    }\n    case ADD_TWEET: {\n      const newState = { ...state };\n      newState[action.tweet.id] = action.tweet;\n      return newState;\n    }\n    default:\n      return state;\n  }\n};\n\nexport default tweetsReducer;\n"]},"metadata":{},"sourceType":"module"}